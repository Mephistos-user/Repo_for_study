/* 
    СЕЛЕКТОРЫ: 
h1              - селектор тегов
.some-class     - селектор класса
#some-id        - селектор идентификатора
*               - универсальный селектор (все)
.box p          - селектор потомков
h1, h2, .intro  - перечисление селекторов
h2 + p          - "...для всех параграфов p рядом с заголовками h2"
h2:hover        - псевдокласс (при наведении)
a:visited       - псевдокласс (при посещении)
*/

/* 
    box-sizing:
.box {
    width: 150px;
    padding: 20px;
    border: 2px solid black;
    margin: 50px;

    по размеру width: 150px;
    box-sizing: content-box;

}
.box {
    width: 150px;
    padding: 20px;
    border: 2px solid black;
    margin: 50px;

    /по размеру width: 150px; минус padding: 20px; border: 2px solid black;  
    т.е. =106px
    box-sizing: border-box;
} 
*/

/* 
    DISPLAY
h1 {
    display: none;
    скрывает но не удаляет элемент со страницы

    display: block; 
    элемент ведет себя как блочный, т.е. Ширина соответствует размеру родителя и для блока можно задать ширину и высоту. Высота определяется содержимым
   
    display: inline;
    элемент ведет себя как строчный, т.е. Ширина и высота определяется содержимым и нельзя задать ширину и высоту. Как плавающее в абзаце слово
    
    display: inline-block;
    элемент ведет себя снаружи как строчный, а внутри как блочный, т.е. такой же, как block, за исключением того, что ширина определяется содержимым
} 
*/

    /* размеры и единицы измерения
Абсолютные
px = 1/96in(пиксель)
cm = 96px/2.54
in = 96px = 2.54cm
mm = 1/10cm
Q = 1/4mm = 1/40cm(четверть миллиметра)
pc = 1/16in(пики)
pt = 1/72in(пункты)

Относительные
em - задает величину относительно вычесленного размера шрифта элемента
rem - рассчитывается относительно размера шрифта корневого элемента
vh - задает размер в процентах от высоты вьюпорта. 1vh = 1% высоты
vw - задает размер в процентах от ширины вьюпорта. 1vw = 1% ширины
vmin - считается относительно меньшей стороны вьюпорта
vmax - считается относительно большей стороны вьюпорта

Углы (по часовой стрелке)
deg - градусы
grad - градианы
rad - радианы
turn - обороты

Время
ms - миллисекунда 
s - секунда. 1s=1000ms */

/* 
        Видимость контента в границах блока (overflow):
.bloc {
    контент виден весь (по умолчанию) не обращая внимания на границы родительского блока
    overflow:visible;

    контент обрезается по границам родительского блока
    overflow:hidden;

    контент обрезается по границам родительского блока с учетом внутренних отступов
    overflow:clip;

    контент обрезается по границам родительского блока и появляются полосы прокрутки
    overflow:scroll;

    когда контент больше границ родительского блока, то появляется полоса прокрутки
    overflow:auto;

    чтобы скрыть выпирающий текст (появится многоточие)
    text-overflow:ellipsis;
} */

    /* Обтекание (float)
.box {
    обтекание слева
    float: left;
    обтекание справа
    float: right;
} */

    /* Позиционирование (position)
.box {
    по умолчанию: 
    position: static; - нельзя применить top,left,bottom,right,z-index
    
    position: relative; - можно смещать при помощи top,left,bottom,right

    position: absolute; - изымается из потока и перестает взаимодействовать с другими элементами (как бы в новом слое)

    position: fixed; - зафиксировать относительно окна браузера (вьюпорта)

    position: sticky; - липкое позиционирование: элемент ведет себя как статичный пока верхняя часть страницы
    top: 10px;          не достигнет указанного top. В этот момент он станет фиксированным относительно вьюпорта,
    background: #000;   пока мы не пролистаем его родителя

} */

        /* ПОРЯДОК НАЛОЖЕНИЯ СЛОЕВ В ПОТОКЕ:
01 - Фон (background) и рамки элемента (border)
02 - позиционированные элементы (включая потомков), у которых значение свойства z-index меньше 0
03 - элементы без контекста наложения с display: block
04 - элементы со свойством float
05 - элементы с display: inline
06 - элементы (включая потомков) с z-index: auto или  z-index: 0, а также элементы с opacity(прозрачность) меньше 0
07 - элементы (включая потомков) с z-index больше 0 */

        /* ПСЕВДО-КЛАССЫ */
button:hover, a:hover {
    /* при наведении мыши */
}
button:active, a:active {
    /* при нажатии на элемент */
}
a:visited {
    /* посещенная ссылка */
}
fieldset:checked {
    /* когда в чекбоксе выбран элемент */
}
input:checked ~ span {
    /* когда в чекбоксе выбран элемент */
}
input:valid {
    /* когда поле заполненно валидно */
}
input:invalid {
    /* когда поле заполненно невалидно или не заполненно*/
}
input:required {
    /* для полей обязательных к заполнению*/
}

.vac-list li:not(.active) {
    /* для значений от противного */
}

        /* Псевдо-класс CHILD */
.vac-list li:nth-child(2) {
    /* второму ребенку списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:first-child {
    /* первому ребенку списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:last-child {
    /* последнему ребенку списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:nth-last-child(3) {
    /* третьему с конца ребенку списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:nth-child(odd) {
    /* всем нечетным детям списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:nth-child(even) {
    /* всем четным детям списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:nth-child(3n+2) {
    /* каждому ТРЕТЬЕМУ ребенку начиная со ВТОРОГО списка li класса vac-list задать какие-то атрибуты*/
}
.vac-list li:only-child {
    /* если элемент явлеется единственным дочерним для родительского */
}

        /* ПСЕВДО-ЭЛЕМЕНТЫ */
    /* встраивание ДО: */
/* <h2>
    ::before == $0
    ВАКАНСИИ
</h2>

h2::before {
    content = "!!!";
} */

    /* встраивание ПОСЛЕ: */
/* <h2>
    ::after == $0
    ВАКАНСИИ
</h2>

h2::after {
    content = "!!!";
} */

    /* первый символ
.text::first-letter {
    font-size: 52px;
} */
    /* первая строка
.text::first-line {
    font-size: 52px;
} */
    /* выделенный текст
.text::selection {
    background: red;
} */

/* textarea::placeholder {
    пространство внутри input, textarea
} */

        /* АНИМАЦИЯ */
    /* ПЕРЕХОДЫ (transition:hover,:active,:checked,:valid,:invalid) */
    /* Применение: */
/* 01 большинство свойств с числовыми значениями: 
       margin, padding, width, height, border, box-shadow, font-size, top, right, bottom, left и т.п */
/* 02 большинство свойств, указывающих цвет: 
       color, background-color и т.п. */
/* 03 свойство transform */


/* transition: имя свойства / длительность / временная функция / задержка */

/* .button {
    color: #fff;
    background: linear-gradient(265.71deg, rgba(161, 69, 189, 0.8)-1.44%,
    rgba(55,0,89,0.8)77.83%),rgba(161, 69, 189, 1);
    transition: color .4s, background-color 1s, box-shadow 1s;
}
.button:hover {
    color: rgb(161, 69, 189);
    background: #fff;
    box-shadow: 0px 4px 33px #FFFFFF;
} */

        /* временная функция */
/* transition-timing-function: ease (по умолчанию);
transition-timing-function: ease-in;
transition-timing-function: ease-out;
transition-timing-function: ease-in-out;
transition-timing-function: linear;
transition-timing-function: cubic-bezier(p1, p2, p3, p4); http://cubic-bezier.com/#.25..1..25.1 */

        /* TRANSFORM */
/* .button {
    transition: transform 2s;
}
.button:hover {
    transform: translate(Xpx,Ypx); - перемещение по осям X, Y

    transform: scale(X, Y); - увеличение или уменьшение элемента по осям X,Y.
                            Если один аргумент то пропорционально и по X и по Y.
                            Могуть быть дробные значения.
                            Если отрицательный аргумент то элемент отразится

    transform: skewX(Xdeg); - наклон по осям X
    transform: skewY(Ydeg);                  Y

    transform: rotate(Zdeg); - поворот в градусах или аналогичных единицах 

} */

        /* свойства АНИМАЦИЯ */
/* разбивка на кадры: */
@keyframes nameanimation {
    50% {
        /*  */
    }
    100%{
        /*  */
    }
}
@keyframes nameanimation {
    from {
        /*  */
    }
    to {
        /*  */
    }
}

/* .box {
    width: 100px;
    height: 100px;
    background-color: #000;
    animation-name: nameanimation; - название анимации
    animation-duration: 5s; - длительность анимации
    animation-iteration-count: infinite; количество иттераций (infinite - бесконечно)
    animation-direction: alternate; - направление анимации (alternate - возвращается покадрово назад)
    
} */

        /* @media запросы

width   375px - 960px   - смартфон
        960px - 1200px  - планшет
        1200px - 1920px - десктоп */

/* @media (min-width: 900px) {
    .block {
        display: inline-block;
    }    
} */