package oop3.oop61;

import java.math.BigDecimal;
import java.math.BigInteger;

public class MyClass61 {
    public static void main(String[] args) {

        // модификаторы доступа - public, protected, private, отсутствие модификатора (default-модификатор (package-private))

        // public - может быть использовано везде (в другом методе этого же класса, другом классе в том же пакете, в наследнике этого класса, в другом классе в другом пакете)
        // protected - может быть использовано ограничено (в другом методе этого же класса, другом классе в том же пакете, в наследнике этого класса)
        // default-модификатор - может быть использовано ограничено (в другом методе этого же класса, другом классе в том же пакете)
        // private - может быть использовано ТОЛЬКО в методе внутри класса (в другом методе этого же класса)

        // класс с модификатором default-модификатор (package-private) можно использовать только внутри того же пакета

        // Где можно вызывать (применять):      | public | protected | отсутствие модификатора | private |
        // 1. в другом методе этого же класса   |   +    |      +    |            +            |    +    |
        // 2. другом классе в том же пакете     |   +    |      +    |            +            |    -    |
        // 3. в наследнике этого класса         |   +    |      +    |            -            |    -    |
        // 4. в другом классе в другом пакете   |   +    |      -    |            -            |    -    |

        // обычно поля делают private, но при этом делают методы доступа к приватным полям (getter, setter)

        // Нестатические методы могут работать с переменными экземпляра,
        // потому что они вызываются на конкретном объекте и имеют доступ к его состоянию.
        // В то время как статические методы работают только с данными класса и не имеют доступа к данным экземпляра класса.



    }
}
