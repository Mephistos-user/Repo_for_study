from utils import randbool
from utils import randcell
from utils import randcell2
# 0 - –ø–æ–ª–µ üü©
# 1 - –¥–µ—Ä–µ–≤–æ üå≥
# 2 - —Ä–µ–∫–∞ üåä 
# 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å üè•
# 4 - –∞–ø–≥—Ä–µ–π–¥-—à–æ–ø üè™
# -  –≤–µ—Ä—Ç–æ–ª–µ—Ç üöÅ
# - üî•
# - ‚ö°
# - ‚õÖ üå©Ô∏è ‚õàÔ∏è 
# - üíó
# - üõ¢Ô∏è
# - üí∞
# - üüß üü´ üî≥

CELL_TYPES = "üü©üå≥üåäüè•üè™"

class Map():
    def generate_river(self, l):
        rc = randcell(self.w, self.h)
        #print(rc)
        rx, ry = rc[0], rc[1]
        if (self.check_bounds(rx, ry)):
            self.cells[rx][ry] = 2
        #self.cells[rc[0]][rc[1]] = 2
        while l > 0:
            rc2 = randcell2(rx, ry)
            rx2, ry2 = rc2[0], rc2[1]
            if (self.check_bounds(rx2, ry2)):
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry
                l -= 1

    def generate_forest(self, r, mxr):# r - –æ—Ç—Å–µ—á–∫–∞, mxr - –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–∞
        for ri in range(self.h):
            for ci in range(self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 1

    def print_map(self):
        print('üî≥' * (self.w + 2))#–≤–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞(–≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ä–∞–º–∫–∏)
        for row in self.cells:
            print('üî≥', end="")#–ª–µ–≤–∞—è —Ä–∞–º–∫–∞
            for cell in row:
                if (cell >= 0 and cell < len(CELL_TYPES)):
                    print(CELL_TYPES[cell], end="")
                
                
                #if cell == 0:
                 #   print('0', end="")# –≤–º–µ—Å—Ç–æ —Ü–∏—Ñ—Ä –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
                #elif cell == 1:
                 #   print('1', end="")
                #elif cell == 2:
                 #   print('2', end="")
                #elif cell == 3:
                 #   print('3', end="")
                #elif cell == 4:
                 #   print('4', end="")               
            print('üî≥')#–ø—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞
        print('üî≥' * (self.w + 2))#–Ω–∏–∂–Ω—è—è —Ä–∞–º–∫–∞

    def check_bounds(self, x, y):
        if (x < 0 or y < 0 or x >= self.h or y >= self.w):#–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä –ø–ª—è
            return False
        return True

    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)]


tmp = Map(20,12)
#tmp.cells[1][1] = 1
#tmp.cells[2][2] = 2
#tmp.cells[3][3] = 3

tmp.generate_forest(3, 10)
#if (tmp.check_bounds(2, 3)):
#    print("YES")
tmp.generate_river(8)
tmp.generate_river(4)
tmp.generate_river(6)
tmp.cells[4][4] = 4
tmp.cells[7][7] = 3
tmp.print_map()
