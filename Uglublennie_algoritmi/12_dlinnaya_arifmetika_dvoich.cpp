// длинная арифметика для двоичных чисел чисел
// произведение двух длинных чисел
#include <iostream>
#include <bitset>
// #include <algorithm>

using namespace std;

// функция ввода значений в массив


// функция вывода значений массива


// функция суммы


// функция произведения



int main()
{
   /*
    3   00011
    7   00111
    &   00011
    bool b[10] // 8*10 bit 
   */
    // int a[10]; // 4*10 bit
    // unsigned int a[10] // 
    // bitset<10> x(3); // 10 bit // набор битов
    // bitset<10> y(7); // 10 bit // 
    // cout << (x & y).to_ulong(); // размеры битсетов для операций должны быть одинаковыми
    // cout << (x | y).to_ulong();
    // cout << (x | ~y).to_ulong(); // ~ перевернуть биты
    // x[1] = 1; // изменить значение бита по индексу
    // x.count(); // считает количество "1"
    // y.test(1); // возвращает значение без адреса
    // y.flip(1); // меняет значение бита на противоположный
    // y ^= (1 << 1); // меняет значение бита на противоположный (также как flip) - битовый сдвиг влево
    // y ^= (a << b) то же самое что и a*(2^b)

    int x = 5;
    cout << __popcount(x); // подсчет "1" // написание зависит от типа процессора
    cout << __countl_zero(x); // подсчет "0" спереди

    // битовые маски
    /*
        banan   0
        yabloko 1
        grusha  2
        a       3
        b       4
        c       5
        d       6
        e       7

        // покупатель хочет купить:
        0
        2
        5

        00000000 // количество товара
        10100100 // 0 2 5 == числу 36
        10100100 & 10000000 = 10000000 // товар в списке есть
        (1<<0) 
        10100100 & 00000010 = 00000000 // товара в списке нет
        (1<<6)  
        10100100 & 000000100 = 00000100 = __ popcount(32) товар в списке eсть
        (1<<5)

        // как узнать какие товары есть в обеих корзинах
        0 2 5
        0 5 7

        10100100 - 0 2 5

        10000101 - 0 5 7

        

    */


}